#!/bin/bash

set -o errexit
set -o xtrace

test_dir=$(realpath $(dirname $0))
. ${test_dir}/../functions
cluster="some-name-pxc"


setup_cluster() {
    # create cluster
    kubectl apply \
        -f $conf_dir/secrets.yml \
        -f $conf_dir/$cluster.yml \
        -f $conf_dir/pumba.yml \
        -f $conf_dir/client.yml

    # check if all 3 Pods started
    wait_for_running $cluster-node 3

    desc 'check data consistency: write data, read from all'
    run_mysql \
        'CREATE DATABASE IF NOT EXISTS myApp; use myApp; CREATE TABLE IF NOT EXISTS myApp (id int PRIMARY KEY);' \
        "-h $cluster-nodes -uroot -proot_password"
    run_mysql \
        'INSERT myApp.myApp (id) VALUES (100500)' \
        "-h $cluster-nodes -uroot -proot_password"
    compare_mysql_cmd "select-1" "SELECT * from myApp.myApp;" "-h $cluster-node-0.$cluster-nodes -uroot -proot_password"
    compare_mysql_cmd "select-1" "SELECT * from myApp.myApp;" "-h $cluster-node-1.$cluster-nodes -uroot -proot_password"
    compare_mysql_cmd "select-1" "SELECT * from myApp.myApp;" "-h $cluster-node-2.$cluster-nodes -uroot -proot_password"
}

pumba_pod() {
    local action=$1
    local pod=$2

    # run chaos for Pod
    run_pumba $action "re2:$pod"
    sleep 2

    # check if all 3 Pods started
    wait_for_running $cluster-node 3

    desc 'check data consistency for chaosed Pod'
    compare_mysql_cmd "select-1" "SELECT * from myApp.myApp;" "-h $pod.$cluster-nodes -uroot -proot_password"
}

pumba_all_pods() {
    local action=$1

    # run chaos for Pod
    run_pumba $action "re2:$cluster-*"
    sleep 2

    # check if all 3 Pods started
    wait_for_running $cluster-node 3
    sleep 10

    desc 'check data consistency for chaosed Pod'
    compare_mysql_cmd "select-1" "SELECT * from myApp.myApp;" "-h $cluster-node-0.$cluster-nodes -uroot -proot_password"
    compare_mysql_cmd "select-1" "SELECT * from myApp.myApp;" "-h $cluster-node-1.$cluster-nodes -uroot -proot_password"
    compare_mysql_cmd "select-1" "SELECT * from myApp.myApp;" "-h $cluster-node-2.$cluster-nodes -uroot -proot_password"
}


pause_pod() {
    local pod=$1

    # run chaos for Pod
    kubectl exec -it "$(get_pumba)" -- /pumba -l info pause --duration 1m "re2:$pod" &
    pid=$!
    sleep 10

    # write data
    run_mysql \
        'INSERT myApp.myApp (id) VALUES (100501)' \
        "-h $cluster-proxysql -uroot -proot_password"

    # wait for unpause
    wait $pid

    # check if all 3 Pods started
    wait_for_running $cluster-node 3
    sleep 10

    desc 'check data consistency for chaosed Pod'
    compare_mysql_cmd "select-1" "SELECT * from myApp.myApp;" "-h $pod.$cluster-nodes -uroot -proot_password" "-2nd"
}

netem_pod() {
    local pod=$1

    # run chaos for Pod
    kubectl exec -it "$(get_pumba)" -- /pumba -l info netem --tc-image 'gaiadocker/iproute2' --duration 1m loss --percent 100 --correlation 100 "re2:$pod" &
    pid=$!
    sleep 10

    # write data
    run_mysql \
        'INSERT myApp.myApp (id) VALUES (100502)' \
        "-h $cluster-nodes -uroot -proot_password"

    # wait for unpause
    wait $pid || :

    # check if all 3 Pods started
    wait_for_running $cluster-node 3
    sleep 10

    desc 'check data consistency for chaosed Pod'
    compare_mysql_cmd "select-1" "SELECT * from myApp.myApp;" "-h $pod.$cluster-nodes -uroot -proot_password" "-3rd"
}

recreate() {
    # delete cluster
    kubectl delete \
        -f $conf_dir/$cluster.yml
    wait_for_delete pod/$cluster-node-2
    wait_for_delete pod/$cluster-node-1
    wait_for_delete pod/$cluster-node-0

    # recreate cluster
    kubectl apply \
        -f $conf_dir/$cluster.yml

    wait_for_running $cluster-node 3
    compare_mysql_cmd "select-1" "SELECT * from myApp.myApp;" "-h $cluster-node-0.$cluster-nodes -uroot -proot_password"
    compare_mysql_cmd "select-1" "SELECT * from myApp.myApp;" "-h $cluster-node-1.$cluster-nodes -uroot -proot_password"
    compare_mysql_cmd "select-1" "SELECT * from myApp.myApp;" "-h $cluster-node-2.$cluster-nodes -uroot -proot_password"
}

main() {
    create_namespace $namespace
    deploy_operator

    desc 'start cluster'
    setup_cluster

    desc 'recreate cluster'
    recreate

    desc 'kill node-0 pod'
    pumba_pod kill "$cluster-node-0"

    desc 'rm node-0 pod'
    pumba_pod rm "$cluster-node-0"

    desc 'stop node-0 pod'
    pumba_pod stop "$cluster-node-0"

    desc 'pause node-0 pod'
    pause_pod "$cluster-node-0"

    desc 'emulate bad network node-0 pod'
    netem_pod "$cluster-node-0"

    # pumba should be run on all nodes
    #desc 'kill all PXC pods'
    ## TODO: pumba_all_pods kill
    #desc 'rm all PXC pods'
    ## TODO: pumba_all_pods rm
    #desc 'stop all PXC pods'
    ## TODO: pumba_all_pods stop

    destroy $namespace
}

main
